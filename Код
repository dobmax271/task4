#include "framework.h"
#include "часи.h"
#include <string>
#include <windowsx.h>

#define MAX_LOADSTRING 100

// Глобальні змінні:
HINSTANCE hInst;                                // поточний екземпляр
WCHAR szTitle[MAX_LOADSTRING];                  // Текст заголовка
WCHAR szWindowClass[MAX_LOADSTRING];            // ім'я класу головного вікна

// Прототипи функцій:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

HWND hEditHour, hEditMinute, hEditPeriod, hOutput24Hour, hOutputToMidnight;

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
    _In_opt_ HINSTANCE hPrevInstance,
    _In_ LPWSTR    lpCmdLine,
    _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    if (!InitInstance(hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));

    MSG msg;

    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int)msg.wParam;
}

ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = MAKEINTRESOURCEW(IDC_MY);
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
    hInst = hInstance;

    HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, 0, 400, 300, nullptr, nullptr, hInstance, nullptr);

    if (!hWnd)
    {
        return FALSE;
    }

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    return TRUE;
}

void ConvertTime(HWND hWnd)
{
    WCHAR hourText[3], minuteText[3], periodText[2];
    GetWindowText(hEditHour, hourText, 3);
    GetWindowText(hEditMinute, minuteText, 3);
    GetWindowText(hEditPeriod, periodText, 2);

    int hour = _wtoi(hourText);
    int minute = _wtoi(minuteText);
    WCHAR period = periodText[0];

    if (hour < 1 || hour > 12 || minute < 0 || minute > 59 || (period != 'a' && period != 'p'))
    {
        SetWindowText(hOutput24Hour, L"0");
        SetWindowText(hOutputToMidnight, L"0");
        return;
    }

    int convertedHour = (period == 'p' && hour != 12) ? hour + 12 : (period == 'a' && hour == 12) ? 0 : hour;
    WCHAR result[6];
    wsprintf(result, L"%02d:%02d", convertedHour, minute);
    SetWindowText(hOutput24Hour, result);

    int minutesToMidnight = (23 - convertedHour) * 60 + (59 - minute);
    WCHAR timeToMidnight[50];
    wsprintf(timeToMidnight, L"%d год. %d хв.", minutesToMidnight / 60, minutesToMidnight % 60);
    SetWindowText(hOutputToMidnight, timeToMidnight);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_CREATE:
        CreateWindowW(L"static", L"Години (1-12):", WS_VISIBLE | WS_CHILD, 20, 20, 120, 20, hWnd, nullptr, hInst, nullptr);
        hEditHour = CreateWindowW(L"edit", L"", WS_VISIBLE | WS_CHILD | WS_BORDER, 150, 20, 40, 20, hWnd, nullptr, hInst, nullptr);

        CreateWindowW(L"static", L"Хвилини (0-59):", WS_VISIBLE | WS_CHILD, 20, 50, 120, 20, hWnd, nullptr, hInst, nullptr);
        hEditMinute = CreateWindowW(L"edit", L"", WS_VISIBLE | WS_CHILD | WS_BORDER, 150, 50, 40, 20, hWnd, nullptr, hInst, nullptr);

        CreateWindowW(L"static", L"AM/PM (a/p):", WS_VISIBLE | WS_CHILD, 20, 80, 120, 20, hWnd, nullptr, hInst, nullptr);
        hEditPeriod = CreateWindowW(L"edit", L"", WS_VISIBLE | WS_CHILD | WS_BORDER, 150, 80, 40, 20, hWnd, nullptr, hInst, nullptr);

        CreateWindowW(L"static", L"Час у форматі 24-годин:", WS_VISIBLE | WS_CHILD, 20, 110, 160, 20, hWnd, nullptr, hInst, nullptr);
        hOutput24Hour = CreateWindowW(L"edit", L"", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_READONLY, 200, 110, 60, 20, hWnd, nullptr, hInst, nullptr);

        CreateWindowW(L"static", L"Час до півночі:", WS_VISIBLE | WS_CHILD, 20, 140, 160, 20, hWnd, nullptr, hInst, nullptr);
        hOutputToMidnight = CreateWindowW(L"edit", L"", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_READONLY, 200, 140, 100, 20, hWnd, nullptr, hInst, nullptr);

        CreateWindowW(L"button", L"Виконати", WS_VISIBLE | WS_CHILD, 50, 180, 100, 30, hWnd, (HMENU)1, hInst, nullptr);
        CreateWindowW(L"button", L"Закрити", WS_VISIBLE | WS_CHILD, 200, 180, 100, 30, hWnd, (HMENU)2, hInst, nullptr);
        CreateWindowW(L"button", L"Про програму", WS_VISIBLE | WS_CHILD, 120, 220, 120, 30, hWnd, (HMENU)3, hInst, nullptr);
        break;

    case WM_COMMAND:
    {
        int wmId = LOWORD(wParam);
        switch (wmId)
        {
        case 1: // Виконати
            ConvertTime(hWnd);
            break;
        case 2: // Закрити
            DestroyWindow(hWnd);
            break;
        case 3: // Про програму
            MessageBox(hWnd, L"Програма для конвертації часу. Студент: Тимур Попко", L"Про програму", MB_OK);
            break;
        default:
            return DefWindowProc(hWnd, message, wParam, lParam);
        }
    }
    break;

    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hWnd, &ps);
        EndPaint(hWnd, &ps);
    }
    break;

    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}
